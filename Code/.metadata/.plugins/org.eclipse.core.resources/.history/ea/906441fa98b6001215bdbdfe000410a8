package com.example.citywalkapplayout;

import java.util.ArrayList;
import java.util.List;

import android.location.Location;
import android.os.Bundle;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.view.Menu;
import android.view.View;
import android.widget.CheckBox;
import android.widget.TextView;

//import com.example.googlemapsapitester.R;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnMyLocationChangeListener;
import com.google.android.gms.maps.UiSettings;
import com.google.android.gms.maps.GoogleMap.OnInfoWindowClickListener;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.PolylineOptions;
import com.google.android.maps.MapView;

import android.support.v4.app.FragmentActivity;

public class GoogleMapActivity extends FragmentActivity implements
		OnMarkerClickListener, OnInfoWindowClickListener {

	private GoogleMap mMap;
	private static final LatLng copenhagen1 = new LatLng(55.706176, 12.56278);
	private static final LatLng copenhagen2 = new LatLng(55.709126, 12.577543);
	private static final LatLng copenhagen3 = new LatLng(55.699647, 12.577114);
	private static final LatLng copenhagen4 = new LatLng(55.691084, 12.560892);

	private static final OnMarkerClickListener OnMarkerClickListener = null;
	private List<LatLng> tour1 = null;
	private UiSettings mUiSettings;

	static TextView LocationText;
	MapView mapView;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_googlemapactivity);
		// Create simple map

		/*
		 * LocationListener locationListener = new MyLocationListener();
		 * 
		 * //setting up the location manager LocationManager locman =
		 * (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		 * 
		 * locman.requestLocationUpdates(LocationManager.GPS_PROVIDER, 500,
		 * (float) 0.01, locationListener);
		 * 
		 * //Adds a current location overlay to the map 'mapView' and turns on
		 * the map's compass
		 * 
		 * MyLocation myLocationOverlay = new MyLocation(this, mapView);
		 * myLocationOverlay.enableMyLocation();
		 * myLocationOverlay.enableCompass();
		 * 
		 * mapView.getOverlays().add(myLocationOverlay);
		 * mapView.postInvalidate();
		 */
		setupMap();
	}

	private void setupMap() {
		if (mMap == null) {
			mMap = ((SupportMapFragment) getSupportFragmentManager()
					.findFragmentById(R.id.map))

			.getMap();
		}
		
		Tour tour = new Tour();
		ServerAccessLayer server = new ServerAccessLayer();
		tour = server.getTour("2");
		
		if (mMap != null) {
			// Set initial view to Copenhagen
			mMap.moveCamera(CameraUpdateFactory.newLatLng(copenhagen1));
			// Add a marker at 56, 45
			Marker mark = mMap.addMarker(new MarkerOptions().position(
					copenhagen1).title("Stab alley"));
		}
		 mUiSettings= mMap.getUiSettings();
		
		 //Draw a line on a map
		 
		 for(int i = 0; i <tour.getTourLocations().size(); i++){
			 tourLocations location = new tourLocations();
			 location = tour.getTourLocations().get(i);
			 //String indexNumber = Integer.toString(location.locationIndex);
			 String latLngLocation = location.location;
			 String[] array = latLngLocation.split(";");
			 
			 LatLng indexNumber1 = new LatLng();
			 
		 }
		 
		 mMap.setOnInfoWindowClickListener(this);
		 List<LatLng> tour1 = new ArrayList<LatLng>();
		 tour1.add(copenhagen1);
		 tour1.add(copenhagen2);
		 tour1.add(copenhagen3);
		 tour1.add(copenhagen4);
		
		 tour1.listIterator();
		
		 List <LatLng> geoPoints = new ArrayList<LatLng>();
		
		 int geoPointCounter = 0;
		
		 for (LatLng geoPoint : tour1){
		 geoPoints.add(geoPoint);
		
		 if((geoPointCounter != 0) && (geoPointCounter != tour1.size())){
		 mMap.addPolyline((new
		 PolylineOptions()).add(geoPoints.get(geoPointCounter-1),
		 geoPoints.get(geoPointCounter)) .width(6) .color(Color.BLUE));
		 }
		 geoPointCounter += 1;
		 }
		 mMap.addPolyline((new PolylineOptions()).add(geoPoints.get(0),
		 geoPoints.get(tour1.size()-1)) .width(6) .color(Color.BLUE));
		
		 mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(copenhagen1,
		 10.0f));
		
		mMap.addPolyline((new PolylineOptions()).add(copenhagen1,
		 copenhagen2));
		
		 mMap.setMyLocationEnabled(true);
		 mUiSettings.setCompassEnabled(true);
		
		 mUiSettings.setRotateGesturesEnabled(true);
		
		 mMap.setOnMyLocationChangeListener(new OnMyLocationChangeListener() {
		
		 @Override
		 public void onMyLocationChange(Location location) {
		 nextNoteEvent(location);
		
		 }
		 });

	}

	public boolean onMarkerClick(final Marker marker) {

		return true;
	}

	public void nextNoteEvent(Location location) {

		// if(location)
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.googlemapactivity, menu);
		return true;
	}

	@Override
	public void onInfoWindowClick(Marker marker) {
		if (marker.getTitle().equals("Marker 1")) {
			// Intent intent = new Intent(this, Marker1.class);
			// startActivity(intent);
		}

	}

}
